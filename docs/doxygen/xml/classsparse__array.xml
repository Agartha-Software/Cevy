<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="classsparse__array" kind="class" language="C++" prot="public">
    <compoundname>sparse_array</compoundname>
    <includes refid="sparse__array_8hpp" local="no">sparse_array.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Type</type>
      </param>
      <param>
        <type>typename Alloc</type>
        <defval>std::allocator&lt;Type&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classsparse__array_1ab59fb49dcc6ca392a91c8415d17a3c3a" prot="public" static="no">
        <type>std::optional&lt; Type &gt;</type>
        <definition>using sparse_array&lt; Type, Alloc &gt;::value_type =  std::optional&lt;Type&gt;</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>sparse_array::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="10" column="9" bodyfile="src/sparse_array.hpp" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsparse__array_1a65c71c4f0bcca9bbbabc85c439d887f0" prot="public" static="no">
        <type><ref refid="classsparse__array_1ab59fb49dcc6ca392a91c8415d17a3c3a" kindref="member">value_type</ref> &amp;</type>
        <definition>using sparse_array&lt; Type, Alloc &gt;::reference_type =  value_type&amp;</definition>
        <argsstring></argsstring>
        <name>reference_type</name>
        <qualifiedname>sparse_array::reference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="11" column="9" bodyfile="src/sparse_array.hpp" bodystart="11" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsparse__array_1afb0d06ca8f41e36a47d6abda28696ce8" prot="public" static="no">
        <type><ref refid="classsparse__array_1ab59fb49dcc6ca392a91c8415d17a3c3a" kindref="member">value_type</ref> const &amp;</type>
        <definition>using sparse_array&lt; Type, Alloc &gt;::const_reference_type =  value_type const &amp;</definition>
        <argsstring></argsstring>
        <name>const_reference_type</name>
        <qualifiedname>sparse_array::const_reference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="12" column="9" bodyfile="src/sparse_array.hpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsparse__array_1a20460098dfb45eb2631d0deb1177ae66" prot="public" static="no">
        <type>std::vector&lt; <ref refid="classsparse__array_1ab59fb49dcc6ca392a91c8415d17a3c3a" kindref="member">value_type</ref> &gt;</type>
        <definition>using sparse_array&lt; Type, Alloc &gt;::container_t =  std::vector&lt;value_type&gt;</definition>
        <argsstring></argsstring>
        <name>container_t</name>
        <qualifiedname>sparse_array::container_t</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="13" column="9" bodyfile="src/sparse_array.hpp" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsparse__array_1ac94aeaa37c62324a106d47bbfce83235" prot="public" static="no">
        <type>typename container_t::size_type</type>
        <definition>using sparse_array&lt; Type, Alloc &gt;::size_type =  typename container_t::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>sparse_array::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="14" column="9" bodyfile="src/sparse_array.hpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsparse__array_1ab8910446f1f23bff64119e0538f31f80" prot="public" static="no">
        <type>typename container_t::iterator</type>
        <definition>using sparse_array&lt; Type, Alloc &gt;::iterator =  typename container_t::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <qualifiedname>sparse_array::iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="15" column="9" bodyfile="src/sparse_array.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classsparse__array_1a2e78ce85b47dc838f264d06eb893a313" prot="public" static="no">
        <type>typename container_t::const_iterator</type>
        <definition>using sparse_array&lt; Type, Alloc &gt;::const_iterator =  typename container_t::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <qualifiedname>sparse_array::const_iterator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="16" column="9" bodyfile="src/sparse_array.hpp" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classsparse__array_1af2b2a73b7d63ec976e11c1b9a7f7a9cd" prot="private" static="no" mutable="no">
        <type><ref refid="classsparse__array_1a20460098dfb45eb2631d0deb1177ae66" kindref="member">container_t</ref></type>
        <definition>container_t sparse_array&lt; Type, Alloc &gt;::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <qualifiedname>sparse_array::_data</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="19" column="21" bodyfile="src/sparse_array.hpp" bodystart="19" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classsparse__array_1a1c103f77064acfb9bd697697d0f216bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sparse_array&lt; Type, Alloc &gt;::sparse_array</definition>
        <argsstring>()</argsstring>
        <name>sparse_array</name>
        <qualifiedname>sparse_array::sparse_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="22" column="9" bodyfile="src/sparse_array.hpp" bodystart="22" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a558e48cc05e50a62f303163341e12721" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sparse_array&lt; Type, Alloc &gt;::~sparse_array</definition>
        <argsstring>()</argsstring>
        <name>~sparse_array</name>
        <qualifiedname>sparse_array::~sparse_array</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="23" column="9" bodyfile="src/sparse_array.hpp" bodystart="23" bodyend="23"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a11505862571456071f408894c88cd091" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>sparse_array&lt; Type, Alloc &gt;::sparse_array</definition>
        <argsstring>(sparse_array const &amp;other)</argsstring>
        <name>sparse_array</name>
        <qualifiedname>sparse_array::sparse_array</qualifiedname>
        <param>
          <type><ref refid="classsparse__array" kindref="compound">sparse_array</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="24" column="9" bodyfile="src/sparse_array.hpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1af3f0ab8b4ae17a9d165f87232ef558fc" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>sparse_array&lt; Type, Alloc &gt;::sparse_array</definition>
        <argsstring>(sparse_array &amp;&amp;other) noexcept</argsstring>
        <name>sparse_array</name>
        <qualifiedname>sparse_array::sparse_array</qualifiedname>
        <param>
          <type><ref refid="classsparse__array" kindref="compound">sparse_array</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="25" column="9" bodyfile="src/sparse_array.hpp" bodystart="25" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1accb1353df68c7e0c8e9db4cd73322f4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array" kindref="compound">sparse_array</ref> &amp;</type>
        <definition>sparse_array &amp; sparse_array&lt; Type, Alloc &gt;::operator=</definition>
        <argsstring>(sparse_array const &amp;other)</argsstring>
        <name>operator=</name>
        <qualifiedname>sparse_array::operator=</qualifiedname>
        <param>
          <type><ref refid="classsparse__array" kindref="compound">sparse_array</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="27" column="22" bodyfile="src/sparse_array.hpp" bodystart="27" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a8c9a1814a5d1f212d5e943bf93ea13bf" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classsparse__array" kindref="compound">sparse_array</ref> &amp;</type>
        <definition>sparse_array &amp; sparse_array&lt; Type, Alloc &gt;::operator=</definition>
        <argsstring>(sparse_array &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <qualifiedname>sparse_array::operator=</qualifiedname>
        <param>
          <type><ref refid="classsparse__array" kindref="compound">sparse_array</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="32" column="22" bodyfile="src/sparse_array.hpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a39d36a91d0b15a2e987f1c837d048629" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1a65c71c4f0bcca9bbbabc85c439d887f0" kindref="member">reference_type</ref></type>
        <definition>reference_type sparse_array&lt; Type, Alloc &gt;::operator[]</definition>
        <argsstring>(std::size_t idx)</argsstring>
        <name>operator[]</name>
        <qualifiedname>sparse_array::operator[]</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="37" column="24" bodyfile="src/sparse_array.hpp" bodystart="37" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a75dbd79cdfe906e12a35a20a15b64d33" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1afb0d06ca8f41e36a47d6abda28696ce8" kindref="member">const_reference_type</ref></type>
        <definition>const_reference_type sparse_array&lt; Type, Alloc &gt;::operator[]</definition>
        <argsstring>(std::size_t idx) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>sparse_array::operator[]</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="41" column="30" bodyfile="src/sparse_array.hpp" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a4bc6c7de1804d3baf4b50c283cb8d9ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1ab8910446f1f23bff64119e0538f31f80" kindref="member">iterator</ref></type>
        <definition>iterator sparse_array&lt; Type, Alloc &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <qualifiedname>sparse_array::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="45" column="18" bodyfile="src/sparse_array.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a2f864bce00699fa68948b424848ef0d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1a2e78ce85b47dc838f264d06eb893a313" kindref="member">const_iterator</ref></type>
        <definition>const_iterator sparse_array&lt; Type, Alloc &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <qualifiedname>sparse_array::begin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="46" column="24" bodyfile="src/sparse_array.hpp" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a2957e2cca0cb507bcca94cf5f487c14e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1a2e78ce85b47dc838f264d06eb893a313" kindref="member">const_iterator</ref></type>
        <definition>const_iterator sparse_array&lt; Type, Alloc &gt;::cbegin</definition>
        <argsstring>() const</argsstring>
        <name>cbegin</name>
        <qualifiedname>sparse_array::cbegin</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="47" column="24" bodyfile="src/sparse_array.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a52a5fd8643e5df74086ae498803a6587" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1ab8910446f1f23bff64119e0538f31f80" kindref="member">iterator</ref></type>
        <definition>iterator sparse_array&lt; Type, Alloc &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <qualifiedname>sparse_array::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="48" column="18" bodyfile="src/sparse_array.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a4831b2c6ecea2d7c5a83d09e0b1840a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1a2e78ce85b47dc838f264d06eb893a313" kindref="member">const_iterator</ref></type>
        <definition>const_iterator sparse_array&lt; Type, Alloc &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <qualifiedname>sparse_array::end</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="49" column="24" bodyfile="src/sparse_array.hpp" bodystart="49" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a135e0c36a0b5b3129b1d8f2ab173c83e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1a2e78ce85b47dc838f264d06eb893a313" kindref="member">const_iterator</ref></type>
        <definition>const_iterator sparse_array&lt; Type, Alloc &gt;::cend</definition>
        <argsstring>() const</argsstring>
        <name>cend</name>
        <qualifiedname>sparse_array::cend</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="50" column="24" bodyfile="src/sparse_array.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a5bbcaa7d68b3daf3d1cd6ebaa38c49c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1ac94aeaa37c62324a106d47bbfce83235" kindref="member">size_type</ref></type>
        <definition>size_type sparse_array&lt; Type, Alloc &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <qualifiedname>sparse_array::size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="51" column="19" bodyfile="src/sparse_array.hpp" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a7f6c1eb2166019cc32ee73e41e3b0560" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sparse_array&lt; Type, Alloc &gt;::resize</definition>
        <argsstring>(size_type len)</argsstring>
        <name>resize</name>
        <qualifiedname>sparse_array::resize</qualifiedname>
        <param>
          <type><ref refid="classsparse__array_1ac94aeaa37c62324a106d47bbfce83235" kindref="member">size_type</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="52" column="14" bodyfile="src/sparse_array.hpp" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a4a51887e0990fe78855505815f0a61d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1a65c71c4f0bcca9bbbabc85c439d887f0" kindref="member">reference_type</ref></type>
        <definition>reference_type sparse_array&lt; Type, Alloc &gt;::insert_at</definition>
        <argsstring>(size_type pos, Type const &amp;val)</argsstring>
        <name>insert_at</name>
        <qualifiedname>sparse_array::insert_at</qualifiedname>
        <param>
          <type><ref refid="classsparse__array_1ac94aeaa37c62324a106d47bbfce83235" kindref="member">size_type</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Type const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="54" column="24" bodyfile="src/sparse_array.hpp" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a0f8cf68536f6c2da73ca0cf7acaf264f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1a65c71c4f0bcca9bbbabc85c439d887f0" kindref="member">reference_type</ref></type>
        <definition>reference_type sparse_array&lt; Type, Alloc &gt;::insert_at</definition>
        <argsstring>(size_type pos, Type &amp;&amp;val)</argsstring>
        <name>insert_at</name>
        <qualifiedname>sparse_array::insert_at</qualifiedname>
        <param>
          <type><ref refid="classsparse__array_1ac94aeaa37c62324a106d47bbfce83235" kindref="member">size_type</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Type &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="61" column="24" bodyfile="src/sparse_array.hpp" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a7249e13a8035523c5e4edd84b32fbe3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class ...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classsparse__array_1a65c71c4f0bcca9bbbabc85c439d887f0" kindref="member">reference_type</ref></type>
        <definition>reference_type sparse_array&lt; Type, Alloc &gt;::emplace_at</definition>
        <argsstring>(size_type pos, Params &amp;&amp;... args)</argsstring>
        <name>emplace_at</name>
        <qualifiedname>sparse_array::emplace_at</qualifiedname>
        <param>
          <type><ref refid="classsparse__array_1ac94aeaa37c62324a106d47bbfce83235" kindref="member">size_type</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>Params &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="69" column="24" bodyfile="src/sparse_array.hpp" bodystart="69" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a805a005b32bd9e3006935f6137643ffb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void sparse_array&lt; Type, Alloc &gt;::erase</definition>
        <argsstring>(size_type pos)</argsstring>
        <name>erase</name>
        <qualifiedname>sparse_array::erase</qualifiedname>
        <param>
          <type><ref refid="classsparse__array_1ac94aeaa37c62324a106d47bbfce83235" kindref="member">size_type</ref></type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="73" column="14" bodyfile="src/sparse_array.hpp" bodystart="73" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a20f5cc4369ae512c58b54783c13d60d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t sparse_array&lt; Type, Alloc &gt;::first_free</definition>
        <argsstring>()</argsstring>
        <name>first_free</name>
        <qualifiedname>sparse_array::first_free</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="77" column="16" bodyfile="src/sparse_array.hpp" bodystart="77" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1aa58d33a6f467121a202cf1d912b17dc2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsparse__array_1a65c71c4f0bcca9bbbabc85c439d887f0" kindref="member">reference_type</ref></type>
        <definition>reference_type sparse_array&lt; Type, Alloc &gt;::insert</definition>
        <argsstring>(Type &amp;&amp;val)</argsstring>
        <name>insert</name>
        <qualifiedname>sparse_array::insert</qualifiedname>
        <param>
          <type>Type &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="86" column="24" bodyfile="src/sparse_array.hpp" bodystart="86" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classsparse__array_1a16f536c4d613461e6dcc16a6bc668301" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::optional&lt; <ref refid="classsparse__array_1ac94aeaa37c62324a106d47bbfce83235" kindref="member">size_type</ref> &gt;</type>
        <definition>std::optional&lt; size_type &gt; sparse_array&lt; Type, Alloc &gt;::get_index</definition>
        <argsstring>(value_type const &amp;elem) const</argsstring>
        <name>get_index</name>
        <qualifiedname>sparse_array::get_index</qualifiedname>
        <param>
          <type><ref refid="classsparse__array_1ab59fb49dcc6ca392a91c8415d17a3c3a" kindref="member">value_type</ref> const &amp;</type>
          <declname>elem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/sparse_array.hpp" line="90" column="23" bodyfile="src/sparse_array.hpp" bodystart="90" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/sparse_array.hpp" line="8" column="1" bodyfile="src/sparse_array.hpp" bodystart="8" bodyend="100"/>
    <listofallmembers>
      <member refid="classsparse__array_1af2b2a73b7d63ec976e11c1b9a7f7a9cd" prot="private" virt="non-virtual"><scope>sparse_array</scope><name>_data</name></member>
      <member refid="classsparse__array_1a4bc6c7de1804d3baf4b50c283cb8d9ef" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>begin</name></member>
      <member refid="classsparse__array_1a2f864bce00699fa68948b424848ef0d0" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>begin</name></member>
      <member refid="classsparse__array_1a2957e2cca0cb507bcca94cf5f487c14e" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>cbegin</name></member>
      <member refid="classsparse__array_1a135e0c36a0b5b3129b1d8f2ab173c83e" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>cend</name></member>
      <member refid="classsparse__array_1a2e78ce85b47dc838f264d06eb893a313" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>const_iterator</name></member>
      <member refid="classsparse__array_1afb0d06ca8f41e36a47d6abda28696ce8" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>const_reference_type</name></member>
      <member refid="classsparse__array_1a20460098dfb45eb2631d0deb1177ae66" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>container_t</name></member>
      <member refid="classsparse__array_1a7249e13a8035523c5e4edd84b32fbe3b" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>emplace_at</name></member>
      <member refid="classsparse__array_1a52a5fd8643e5df74086ae498803a6587" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>end</name></member>
      <member refid="classsparse__array_1a4831b2c6ecea2d7c5a83d09e0b1840a3" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>end</name></member>
      <member refid="classsparse__array_1a805a005b32bd9e3006935f6137643ffb" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>erase</name></member>
      <member refid="classsparse__array_1a20f5cc4369ae512c58b54783c13d60d0" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>first_free</name></member>
      <member refid="classsparse__array_1a16f536c4d613461e6dcc16a6bc668301" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>get_index</name></member>
      <member refid="classsparse__array_1aa58d33a6f467121a202cf1d912b17dc2" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>insert</name></member>
      <member refid="classsparse__array_1a4a51887e0990fe78855505815f0a61d9" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>insert_at</name></member>
      <member refid="classsparse__array_1a0f8cf68536f6c2da73ca0cf7acaf264f" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>insert_at</name></member>
      <member refid="classsparse__array_1ab8910446f1f23bff64119e0538f31f80" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>iterator</name></member>
      <member refid="classsparse__array_1accb1353df68c7e0c8e9db4cd73322f4e" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>operator=</name></member>
      <member refid="classsparse__array_1a8c9a1814a5d1f212d5e943bf93ea13bf" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>operator=</name></member>
      <member refid="classsparse__array_1a39d36a91d0b15a2e987f1c837d048629" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>operator[]</name></member>
      <member refid="classsparse__array_1a75dbd79cdfe906e12a35a20a15b64d33" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>operator[]</name></member>
      <member refid="classsparse__array_1a65c71c4f0bcca9bbbabc85c439d887f0" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>reference_type</name></member>
      <member refid="classsparse__array_1a7f6c1eb2166019cc32ee73e41e3b0560" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>resize</name></member>
      <member refid="classsparse__array_1a5bbcaa7d68b3daf3d1cd6ebaa38c49c8" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>size</name></member>
      <member refid="classsparse__array_1ac94aeaa37c62324a106d47bbfce83235" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>size_type</name></member>
      <member refid="classsparse__array_1a1c103f77064acfb9bd697697d0f216bb" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>sparse_array</name></member>
      <member refid="classsparse__array_1a11505862571456071f408894c88cd091" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>sparse_array</name></member>
      <member refid="classsparse__array_1af3f0ab8b4ae17a9d165f87232ef558fc" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>sparse_array</name></member>
      <member refid="classsparse__array_1ab59fb49dcc6ca392a91c8415d17a3c3a" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>value_type</name></member>
      <member refid="classsparse__array_1a558e48cc05e50a62f303163341e12721" prot="public" virt="non-virtual"><scope>sparse_array</scope><name>~sparse_array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
