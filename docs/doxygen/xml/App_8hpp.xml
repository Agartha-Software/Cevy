<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.4" xml:lang="en-US">
  <compounddef id="App_8hpp" kind="file" language="C++">
    <compoundname>App.hpp</compoundname>
    <includes refid="sparse__array_8hpp" local="yes">./sparse_array.hpp</includes>
    <includes refid="entity_8hpp" local="yes">./entity.hpp</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">any</includes>
    <includes local="no">typeindex</includes>
    <includes local="no">iostream</includes>
    <includes local="no">tuple</includes>
    <includes local="no">functional</includes>
    <includes local="no">type_traits</includes>
    <includedby refid="App_8cpp" local="yes">src/App.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/App.hpp</label>
        <link refid="App_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>./entity.hpp</label>
        <link refid="entity_8hpp"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>./sparse_array.hpp</label>
        <link refid="sparse__array_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>any</label>
      </node>
      <node id="7">
        <label>cstddef</label>
      </node>
      <node id="12">
        <label>functional</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>optional</label>
      </node>
      <node id="11">
        <label>tuple</label>
      </node>
      <node id="13">
        <label>type_traits</label>
      </node>
      <node id="10">
        <label>typeindex</label>
      </node>
      <node id="8">
        <label>unordered_map</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/App.cpp</label>
        <link refid="App_8cpp"/>
      </node>
      <node id="1">
        <label>src/App.hpp</label>
        <link refid="App_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structis__super" prot="public">is_super</innerclass>
    <innerclass refid="structis__super_3_01App_01_6_01_4" prot="public">is_super&lt; App &amp; &gt;</innerclass>
    <innerclass refid="structis__super_3_01const_01App_01_6_01_4" prot="public">is_super&lt; const App &amp; &gt;</innerclass>
    <innerclass refid="structis__super_3_01const_01sparse__array_3_01T_00_01A_01_4_01_6_01_4" prot="public">is_super&lt; const sparse_array&lt; T, A &gt; &amp; &gt;</innerclass>
    <innerclass refid="structis__super_3_01sparse__array_3_01T_00_01A_01_4_01_6_01_4" prot="public">is_super&lt; sparse_array&lt; T, A &gt; &amp; &gt;</innerclass>
    <innerclass refid="classApp" prot="public">App</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="App_8hpp_1ab2074970edbe8c581831f9c23d0e78db" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>constexpr bool</type>
        <definition>constexpr bool all</definition>
        <argsstring>(Args... args)</argsstring>
        <name>all</name>
        <param>
          <type>Args...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/App.hpp" line="33" column="16" bodyfile="src/App.hpp" bodystart="33" bodyend="33"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="sparse__array_8hpp" kindref="compound">./sparse_array.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="entity_8hpp" kindref="compound">./entity.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;any&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeindex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="16" refid="structis__super" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__super" kindref="compound">is_super</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classApp" kindref="compound">App</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="21" refid="structis__super_3_01App_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__super" kindref="compound">is_super</ref>&lt;<ref refid="classApp" kindref="compound">App</ref>&amp;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="23" refid="structis__super_3_01const_01App_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__super" kindref="compound">is_super</ref>&lt;const<sp/><ref refid="classApp" kindref="compound">App</ref>&amp;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="27" refid="structis__super_3_01const_01sparse__array_3_01T_00_01A_01_4_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__super" kindref="compound">is_super</ref>&lt;const<sp/><ref refid="classsparse__array" kindref="compound">sparse_array</ref>&lt;T,<sp/>A&gt;&amp;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="30" refid="structis__super_3_01sparse__array_3_01T_00_01A_01_4_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structis__super" kindref="compound">is_super</ref>&lt;<ref refid="classsparse__array" kindref="compound">sparse_array</ref>&lt;T,<sp/>A&gt;&amp;&gt;<sp/>:<sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="33" refid="App_8hpp_1ab2074970edbe8c581831f9c23d0e78db" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="App_8hpp_1ab2074970edbe8c581831f9c23d0e78db" kindref="member">all</ref>(Args...<sp/>args)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(...<sp/>&amp;&amp;<sp/>args);<sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="classApp" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classApp" kindref="compound">App</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37" refid="classApp_1a0cde044e913975dd0379a6433ea45e06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06" kindref="member">STAGE</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>First,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PreUpdate,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StateTransition,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RunFixedUpdateLoop,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Update,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PostUpdate,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Last,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RESET,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ABORT,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="48" refid="classApp_1a3b2afd1af717f568f26674352a39a617" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classApp_1a3b2afd1af717f568f26674352a39a617" kindref="member">erase_access</ref><sp/>=<sp/>std::function&lt;void<sp/>(<ref refid="classApp" kindref="compound">App</ref><sp/>&amp;,<sp/><ref refid="classentity" kindref="compound">entity</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;)&gt;;</highlight></codeline>
<codeline lineno="49" refid="classApp_1a0465080e597eed1bd9ba0e17a56c2c85" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classApp_1a0465080e597eed1bd9ba0e17a56c2c85" kindref="member">component_data</ref><sp/>=<sp/>std::tuple&lt;std::any,<sp/>erase_access&gt;;</highlight></codeline>
<codeline lineno="50" refid="classApp_1a61f6477e1bfb5162de8e07a61082fde8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classApp_1a61f6477e1bfb5162de8e07a61082fde8" kindref="member">system_function</ref><sp/>=<sp/>std::function&lt;void<sp/>(<ref refid="classApp" kindref="compound">App</ref><sp/>&amp;)&gt;;</highlight></codeline>
<codeline lineno="51" refid="classApp_1acbaa58a7b2fcd9b0810a81fb5fc575b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classApp_1acbaa58a7b2fcd9b0810a81fb5fc575b5" kindref="member">system</ref><sp/>=<sp/>std::tuple&lt;system_function,<sp/>STAGE&gt;;</highlight></codeline>
<codeline lineno="52" refid="classApp_1a9a011730f1bdd89929a5d8506b97b63b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;system&gt;<sp/><ref refid="classApp_1a9a011730f1bdd89929a5d8506b97b63b" kindref="member">_systems</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::type_index,<sp/>component_data&gt;<sp/>_components_arrays;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsparse__array" kindref="compound">sparse_array&lt;entity&gt;</ref><sp/>_entities;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58" refid="classApp_1a73de814546f35c9e6f32d802b694c0a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classentity" kindref="compound">entity</ref><sp/><ref refid="classApp_1a73de814546f35c9e6f32d802b694c0a4" kindref="member">spawn_entity</ref>()<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>_entities.<ref refid="classsparse__array_1a20f5cc4369ae512c58b54783c13d60d0" kindref="member">first_free</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classentity" kindref="compound">entity</ref><sp/>new_e<sp/>=<sp/><ref refid="classentity" kindref="compound">entity</ref>(pos);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_entities.<ref refid="classsparse__array_1a4a51887e0990fe78855505815f0a61d9" kindref="member">insert_at</ref>(pos,<sp/>new_e);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_e;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classApp_1aa61dccf8e61863fc4946c4dcb46e3318" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classentity" kindref="compound">entity</ref><sp/><ref refid="classApp_1aa61dccf8e61863fc4946c4dcb46e3318" kindref="member">entity_from_index</ref>(std::size_t<sp/>idx)<sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classentity" kindref="compound">entity</ref><sp/>new_e<sp/>=<sp/><ref refid="classentity" kindref="compound">entity</ref>(idx);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_entities.<ref refid="classsparse__array_1a4a51887e0990fe78855505815f0a61d9" kindref="member">insert_at</ref>(idx,<sp/>new_e);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>new_e;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="classApp_1a58e9fc6003efcdc68054a0fe7c7975cd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1a58e9fc6003efcdc68054a0fe7c7975cd" kindref="member">kill_entity</ref>(<ref refid="classentity" kindref="compound">entity</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;e)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>[type,<sp/>data]<sp/>:<sp/>_components_arrays)<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;1&gt;(data)(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Component&gt;</highlight></codeline>
<codeline lineno="80" refid="classApp_1a86e3af83996037c51e64575ddb4a0e8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classsparse__array_1a65c71c4f0bcca9bbbabc85c439d887f0" kindref="member">sparse_array&lt;Component&gt;::reference_type</ref><sp/><ref refid="classApp_1a86e3af83996037c51e64575ddb4a0e8b" kindref="member">add_component</ref>(<ref refid="classentity" kindref="compound">entity</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;to,<sp/>Component<sp/>&amp;&amp;c)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;array<sp/>=<sp/>get_components&lt;Component&gt;();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array.insert_at(to,<sp/>std::forward&lt;Component&gt;(c));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Component,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...<sp/>Params&gt;</highlight></codeline>
<codeline lineno="86" refid="classApp_1af99f28e8b115afe2976d4fdfb6b54552" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classsparse__array_1a65c71c4f0bcca9bbbabc85c439d887f0" kindref="member">sparse_array&lt;Component&gt;::reference_type</ref><sp/><ref refid="classApp_1af99f28e8b115afe2976d4fdfb6b54552" kindref="member">emplace_component</ref>(<ref refid="classentity" kindref="compound">entity</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;to,<sp/>Params<sp/>&amp;&amp;...<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;array<sp/>=<sp/>get_components&lt;Component&gt;();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array.emplace_at(to,<sp/>p...);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Component&gt;</highlight></codeline>
<codeline lineno="92" refid="classApp_1a3fc5bdffcef6585d419e8e72ac10df1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1a3fc5bdffcef6585d419e8e72ac10df1d" kindref="member">remove_component</ref>(<ref refid="classentity" kindref="compound">entity</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;from)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;array<sp/>=<sp/>get_components&lt;Component&gt;();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(from<sp/>&lt;<sp/>array.size())</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.erase(from);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Component&gt;</highlight></codeline>
<codeline lineno="99" refid="classApp_1a7c957f0f54565ca8e5670263d31fa211" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsparse__array" kindref="compound">sparse_array&lt;Component&gt;</ref><sp/>&amp;<ref refid="classApp_1a7c957f0f54565ca8e5670263d31fa211" kindref="member">register_component</ref>()<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a3b2afd1af717f568f26674352a39a617" kindref="member">erase_access</ref><sp/>f_e<sp/>=<sp/>[]<sp/>(<ref refid="classApp" kindref="compound">App</ref><sp/>&amp;<sp/>reg,<sp/><ref refid="classentity" kindref="compound">entity</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<sp/><ref refid="classentity" kindref="compound">entity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>&amp;cmpnts<sp/>=<sp/>reg.<ref refid="classApp_1af2770214700cbb3fb104cea7066c15ef" kindref="member">get_components</ref>&lt;Component&gt;();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classentity" kindref="compound">entity</ref><sp/>&lt;<sp/>cmpnts.size())</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmpnts[<ref refid="classentity" kindref="compound">entity</ref>]<sp/>=<sp/>std::nullopt;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::any<sp/>a<sp/>=<sp/>std::make_any&lt;sparse_array&lt;Component&gt;&gt;();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_components_arrays.insert({std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Component)),<sp/>std::make_tuple(a,<sp/>f_e)});</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_cast&lt;sparse_array&lt;Component&gt;&amp;&gt;(std::get&lt;0&gt;(_components_arrays[std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Component))]));</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Component&gt;</highlight></codeline>
<codeline lineno="112" refid="classApp_1af2770214700cbb3fb104cea7066c15ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsparse__array" kindref="compound">sparse_array&lt;Component&gt;</ref><sp/>&amp;<ref refid="classApp_1af2770214700cbb3fb104cea7066c15ef" kindref="member">get_components</ref>()<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_cast&lt;sparse_array&lt;Component&gt;&amp;&gt;(std::get&lt;0&gt;(_components_arrays[std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Component))]));</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Component&gt;</highlight></codeline>
<codeline lineno="116" refid="classApp_1a7480824a5a49a0fcb325cdfc144ab83d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classsparse__array" kindref="compound">sparse_array&lt;Component&gt;</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;<ref refid="classApp_1a7480824a5a49a0fcb325cdfc144ab83d" kindref="member">get_components</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_cast&lt;sparse_array&lt;Component&gt;&amp;&gt;(std::get&lt;0&gt;(_components_arrays.at(std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Component)))));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Super&gt;</highlight></codeline>
<codeline lineno="121" refid="classApp_1a2b5044687f0b06c4406b9de87e3cb760" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Super<sp/><ref refid="classApp_1a2b5044687f0b06c4406b9de87e3cb760" kindref="member">get_super</ref>()<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(<ref refid="classApp" kindref="compound">App</ref>&amp;)<sp/>==<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(Super))<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>std::any_cast&lt;std::remove_const_t&lt;std::remove_reference_t&lt;Super&gt;&gt;*&gt;(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_any_cast();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_cast&lt;Super&gt;(std::get&lt;0&gt;(_components_arrays[std::type_index(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::remove_reference&lt;Super&gt;::type::value_type::value_type))]));</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="135" refid="classApp_1a4398b85323c8fc43678357adb82b6384" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1a4398b85323c8fc43678357adb82b6384" kindref="member">add_super_system</ref>(R(&amp;&amp;func)(Args...))<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a4398b85323c8fc43678357adb82b6384" kindref="member">add_super_system</ref>&lt;R,<sp/>Args...&gt;(<ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06a06933067aafd48425d67bcb01bba5cb6" kindref="member">STAGE::Update</ref>,<sp/>func);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">R,<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">...Args&gt;</highlight></codeline>
<codeline lineno="140" refid="classApp_1aac64a3af7b4b4830f4fab3d0fb4611b5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1aac64a3af7b4b4830f4fab3d0fb4611b5" kindref="member">add_super_system</ref>(<ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06" kindref="member">STAGE</ref><sp/>stage,<sp/>R(&amp;&amp;func)(Args...))<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(<ref refid="App_8hpp_1ab2074970edbe8c581831f9c23d0e78db" kindref="member">all</ref>(<ref refid="structis__super" kindref="compound">is_super&lt;Args&gt;</ref>()...),<sp/></highlight><highlight class="stringliteral">&quot;type<sp/>must<sp/>be<sp/>reference<sp/>to<sp/>super&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a61f6477e1bfb5162de8e07a61082fde8" kindref="member">system_function</ref><sp/>sys<sp/>=<sp/>[&amp;func]<sp/>(<ref refid="classApp" kindref="compound">App</ref><sp/>&amp;<sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(reg.get_super&lt;Args&gt;()...);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a9a011730f1bdd89929a5d8506b97b63b" kindref="member">_systems</ref>.push_back(std::make_tuple(sys,<sp/>stage));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Components,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Function&gt;</highlight></codeline>
<codeline lineno="149" refid="classApp_1aca65514162392d443344825d5c0cb033" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1aca65514162392d443344825d5c0cb033" kindref="member">add_system</ref>(<ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06" kindref="member">STAGE</ref><sp/>stage,<sp/>Function<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a61f6477e1bfb5162de8e07a61082fde8" kindref="member">system_function</ref><sp/>sys<sp/>=<sp/>[&amp;f]<sp/>(<ref refid="classApp" kindref="compound">App</ref><sp/>&amp;<sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(reg,<sp/>reg.get_components&lt;Components&gt;()...);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a9a011730f1bdd89929a5d8506b97b63b" kindref="member">_systems</ref>.push_back(std::make_tuple(sys,<sp/>stage));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Components,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Function&gt;</highlight></codeline>
<codeline lineno="157" refid="classApp_1a5f30b0414f003238a96e141f577000ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1a5f30b0414f003238a96e141f577000ed" kindref="member">add_system</ref>(<ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06" kindref="member">STAGE</ref><sp/>stage,<sp/>Function<sp/>&amp;&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a61f6477e1bfb5162de8e07a61082fde8" kindref="member">system_function</ref><sp/>sys<sp/>=<sp/>[&amp;f]<sp/>(<ref refid="classApp" kindref="compound">App</ref><sp/>&amp;<sp/>reg)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f(reg,<sp/>reg.get_components&lt;Components&gt;()...);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a9a011730f1bdd89929a5d8506b97b63b" kindref="member">_systems</ref>.push_back(std::make_tuple(sys,<sp/>stage));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Components,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Function&gt;</highlight></codeline>
<codeline lineno="165" refid="classApp_1ace18daea36972b4842e95cb486fd5180" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1ace18daea36972b4842e95cb486fd5180" kindref="member">add_system</ref>(Function<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1aca65514162392d443344825d5c0cb033" kindref="member">add_system</ref>&lt;Components...&gt;(<ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06a06933067aafd48425d67bcb01bba5cb6" kindref="member">STAGE::Update</ref>,<sp/>f);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Components,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Function&gt;</highlight></codeline>
<codeline lineno="170" refid="classApp_1a4310d1fad32709c7500f288c9c9848e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1a4310d1fad32709c7500f288c9c9848e5" kindref="member">add_system</ref>(Function<sp/>&amp;&amp;f)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1aca65514162392d443344825d5c0cb033" kindref="member">add_system</ref>&lt;Components...&gt;(<ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06a06933067aafd48425d67bcb01bba5cb6" kindref="member">STAGE::Update</ref>,<sp/>f);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classApp_1ae09dc71078b64c56c673b1ad1d25b5d1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1ae09dc71078b64c56c673b1ad1d25b5d1" kindref="member">run</ref>()<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="classApp_1a5949a579b8442faac7dba93598ac63bf" kindref="member">_stop</ref>)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1af1ed16d70c198ba4baa3b634f57a4011" kindref="member">runStages</ref>();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="classApp_1a869502c576b0283f588ef2e607e1cbb3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1a869502c576b0283f588ef2e607e1cbb3" kindref="member">quit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a5949a579b8442faac7dba93598ac63bf" kindref="member">_stop</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="classApp_1ac5ad5f158db685e1af7c292efd16d8e7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1ac5ad5f158db685e1af7c292efd16d8e7" kindref="member">abort</ref>()<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1aef7849ee67789e399571700bd89e8bf5" kindref="member">_stage</ref><sp/>=<sp/><ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06a8d12a2ca7e5a64036d7251a3eda51a38" kindref="member">STAGE::ABORT</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a5949a579b8442faac7dba93598ac63bf" kindref="member">_stop</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190" refid="classApp_1a5949a579b8442faac7dba93598ac63bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classApp_1a5949a579b8442faac7dba93598ac63bf" kindref="member">_stop</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="191" refid="classApp_1aef7849ee67789e399571700bd89e8bf5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06" kindref="member">STAGE</ref><sp/><ref refid="classApp_1aef7849ee67789e399571700bd89e8bf5" kindref="member">_stage</ref><sp/>=<sp/><ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06ab5859d8721cfdc0312b2838b9c985bc1" kindref="member">STAGE::RESET</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="classApp_1af1ed16d70c198ba4baa3b634f57a4011" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1af1ed16d70c198ba4baa3b634f57a4011" kindref="member">runStages</ref>()<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1aef7849ee67789e399571700bd89e8bf5" kindref="member">_stage</ref><sp/>=<sp/><ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06a7fb55ed0b7a30342ba6da306428cae04" kindref="member">STAGE::First</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1ab9d47d41dad2405bfe14fcf555891e42" kindref="member">runStage</ref>();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classApp_1aef7849ee67789e399571700bd89e8bf5" kindref="member">_stage</ref><sp/>!=<sp/><ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06ab5859d8721cfdc0312b2838b9c985bc1" kindref="member">STAGE::RESET</ref><sp/>&amp;&amp;<sp/><ref refid="classApp_1aef7849ee67789e399571700bd89e8bf5" kindref="member">_stage</ref><sp/>!=<sp/><ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06a8d12a2ca7e5a64036d7251a3eda51a38" kindref="member">STAGE::ABORT</ref>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="classApp_1ab9d47d41dad2405bfe14fcf555891e42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classApp_1ab9d47d41dad2405bfe14fcf555891e42" kindref="member">runStage</ref>()<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::reference_wrapper&lt;system&gt;&gt;<sp/>curr_sys;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::copy_if(</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a9a011730f1bdd89929a5d8506b97b63b" kindref="member">_systems</ref>.begin(),</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1a9a011730f1bdd89929a5d8506b97b63b" kindref="member">_systems</ref>.end(),</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::back_inserter(curr_sys),</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[</highlight><highlight class="keyword">this</highlight><highlight class="normal">](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classApp_1acbaa58a7b2fcd9b0810a81fb5fc575b5" kindref="member">system</ref>&amp;<sp/>sys)<sp/>{<sp/>return<sp/>std::get&lt;1&gt;(sys)<sp/>==<sp/>_stage;});</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>this<sp/>part<sp/>could<sp/>be<sp/>multi-threaded<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>sys<sp/>:<sp/>curr_sys)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;0&gt;(sys.get())(*this);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classApp_1aef7849ee67789e399571700bd89e8bf5" kindref="member">_stage</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classApp_1a0cde044e913975dd0379a6433ea45e06" kindref="member">STAGE</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classApp_1aef7849ee67789e399571700bd89e8bf5" kindref="member">_stage</ref>)<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal">};</highlight></codeline>
    </programlisting>
    <location file="src/App.hpp"/>
  </compounddef>
</doxygen>
